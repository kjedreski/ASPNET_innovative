using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.Data.SqlClient;
using System.Text.RegularExpressions;
using Newsform;





namespace Newsform
{
   // public string username { get; set; }

    public partial class Default : System.Web.UI.Page
    {
        

        protected void Page_Load(object sender, EventArgs e)
        {
            // hides visibility of the update form
            Update.Visible = false;
         








            
        }
        
        protected void searchbtn_Click(object sender, EventArgs e)
        {
            // shows visiblity of  update form when data is read from db
            Update.Visible = true;
            // hide status of update or delete notification
            dvMsg.Visible = false;

    
                // read from database. 
                DBconn mydb = new DBconn();
                mydb.connect();
           
            

            // first test for ecxeptions
            // TODO

               
            // first sqlDataReader is for finding the personal info with email. (CMS_USER)
                SqlDataReader rdr = mydb.execsp("CMS_RecipeBox_Search", new Object[,] {
                    { "@searchEmail" , T_email.Text } 
                  } 
                );
                GenerateOutPersonalInfo(rdr);
                rdr.Close();
                rdr.Dispose();


            // second sqlDataReader is for finding the one-to-many relationship
            // for all websites to e-mail
                SqlDataReader rdr2 = mydb.execsp("CMS_RecipeBox_Search_Site", new Object[,] {
                    {"@searchEmail" , T_email.Text}
                }
                    );
                ClearCheckBoxes();
                GenerateOutSites(rdr2);
                rdr2.Close();
                rdr2.Dispose();
                mydb.close();
        }





protected void GenerateOutPersonalInfo(SqlDataReader rdr)
        {
            
    //update information on page 
            while (rdr.Read())
            {
                Updt_email.Text = rdr.GetString(rdr.GetOrdinal("EmailAddress"));
                Updt_city.Text = rdr.GetString(rdr.GetOrdinal("City"));
                Updt_fname.Text = rdr.GetString(rdr.GetOrdinal("FirstName"));
                Updt_lname.Text = rdr.GetString(rdr.GetOrdinal("LastName"));
                Updt_add.Text = rdr.GetString(rdr.GetOrdinal("Address1"));
                Updt_zip.Text = rdr.GetString(rdr.GetOrdinal("PostalCode"));
            } 
        }


protected void GenerateOutSites(SqlDataReader rdr)
{
    // CheckBoxList1 - 6
    // first parse all sites and store them into an array
    // array to store strings
    // iterator to step through array 
    // ASSUMPTION: we won't be adding any more sites to Recipe Box sector
    string[] sites;
    sites = new string[50];
    int iterator = 1;

    while (rdr.Read())
    {
        // first parse all the sites into an array 
        //ASSUMPTION: from database side, all the websites are stored in a certain format and I'm parsing that format
        // the format is http://www.xxx.com/ 
        sites[iterator] = rdr.GetString(rdr.GetOrdinal("UR"));
        iterator++;
    }

    // a function to dynamically mark all websites that are found in the array
     MarkCheckBoxes(sites);
   
}








// utility function for reading websites
protected void MarkCheckBoxes(string[] sites)
{
    // read the sites into appropiate listboxes
    // 6 comes from listbox id's of 1-6
    for (int i = 1; i <= 6; i++)
    {
        foreach (ListItem item in CheckBoxList1.Items)
        {
            if (sites[i] == item.Value.ToString())
                item.Selected = true;
        }

        foreach (ListItem item in CheckBoxList2.Items)
        {
            if (sites[i] == item.Value.ToString())
                item.Selected = true;
        }

        foreach (ListItem item in CheckBoxList3.Items)
        {
            if (sites[i] == item.Value.ToString())
                item.Selected = true;
        }

        foreach (ListItem item in CheckBoxList4.Items)
        {
            if (sites[i] == item.Value.ToString())
                item.Selected = true;
        }

        foreach (ListItem item in CheckBoxList5.Items)
        {
            if (sites[i] == item.Value.ToString())
                item.Selected = true;
        }

        foreach (ListItem item in CheckBoxList6.Items)
        {
            if (sites[i] == item.Value.ToString())
                item.Selected = true;
        }

    }
}



// utility function
// clear all marked list boxes
protected void ClearCheckBoxes()
{
    foreach (ListItem item in CheckBoxList1.Items)
    {
        item.Selected = false;
    }

    foreach (ListItem item in CheckBoxList2.Items)
    {
        item.Selected = false;
    }
    foreach (ListItem item in CheckBoxList3.Items)
    {
        item.Selected = false;
    }

    foreach (ListItem item in CheckBoxList4.Items)
    {
        item.Selected = false;
    }

    foreach (ListItem item in CheckBoxList5.Items)
    {
        item.Selected = false;
    }

    foreach (ListItem item in CheckBoxList6.Items)
    {
        item.Selected = false;
    }

}




















        // utility function
        // clears text boxes on update or delete after db connections
        // an alert will appear notifying the user that the information was processed
        protected void ClearTextBoxes(Control p1)
        {
            foreach (Control ctrl in p1.Controls)
            {
                if (ctrl is TextBox)
                {
                    TextBox t = ctrl as TextBox;

                    if (t != null)
                    {
                        t.Text = String.Empty;
                    }
                }
                else
                {
                    if (ctrl.Controls.Count > 0)
                    {
                        ClearTextBoxes(ctrl);
                    }
                }
            }
        }

        
        protected void Updt_btn_Click(object sender, EventArgs e)
        {
            
            // process update
              DBconn mydb = new DBconn();
                mydb.connect();
            // commenting out for testing

            // test for exceptions
   

            // create rdr sqldatareader to pass into a function that will
            // output the data.

                SqlDataReader rdr = mydb.execsp("CMS_RecipeBox_Update", new Object[,] {
            {"@SearchEmail" , T_email.Text },
            {"@EmailAddress",Updt_email.Text },
            {"@FirstName",Updt_fname.Text},
            {"@LastName",Updt_lname.Text},
            {"@Address", Updt_add.Text},
            {"@City", Updt_city.Text},
            {"@PostalCode",Updt_zip.Text}
            }
                    );
            
                
                
            // commented out for testing, but we need this for the future
               // GenerateOut(rdr);

                rdr.Close();
                rdr.Dispose();
                mydb.close();
             
        

            // after db processes clear text boxes
            ClearTextBoxes(Page);
            ClearCheckBoxes();
            // show that the whole process was successful to the user
            dvMsg.Visible = true;
            lblMsg.Text = "Successfully Updated!";
             
        }

   
















    }
}